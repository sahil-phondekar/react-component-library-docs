"use strict";(self.webpackChunkreact_component_library_docs=self.webpackChunkreact_component_library_docs||[]).push([[6981],{6412:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/react-component-library-docs/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Typography","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Text","href":"/react-component-library-docs/docs/typography/text","docId":"typography/text","unlisted":false},{"type":"link","label":"Heading","href":"/react-component-library-docs/docs/typography/heading","docId":"typography/heading","unlisted":false},{"type":"link","label":"Divider","href":"/react-component-library-docs/docs/typography/divider","docId":"typography/divider","unlisted":false}],"href":"/react-component-library-docs/docs/category/typography"},{"type":"category","label":"Buttons","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Button","href":"/react-component-library-docs/docs/buttons/button","docId":"buttons/button","unlisted":false},{"type":"link","label":"Icon Button","href":"/react-component-library-docs/docs/buttons/icon-button","docId":"buttons/icon-button","unlisted":false}],"href":"/react-component-library-docs/docs/category/buttons"},{"type":"category","label":"Form Fields","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"InputField","href":"/react-component-library-docs/docs/form-fields/input-field","docId":"form-fields/input-field","unlisted":false},{"type":"link","label":"SelectField","href":"/react-component-library-docs/docs/form-fields/select-field","docId":"form-fields/select-field","unlisted":false},{"type":"link","label":"CheckboxField","href":"/react-component-library-docs/docs/form-fields/checkbox-field","docId":"form-fields/checkbox-field","unlisted":false},{"type":"link","label":"CheckboxGroupField","href":"/react-component-library-docs/docs/form-fields/checkbox-group-field","docId":"form-fields/checkbox-group-field","unlisted":false},{"type":"link","label":"RadioGroupField","href":"/react-component-library-docs/docs/form-fields/radio-group-field","docId":"form-fields/radio-group-field","unlisted":false},{"type":"link","label":"DateField","href":"/react-component-library-docs/docs/form-fields/date-field","docId":"form-fields/date-field","unlisted":false},{"type":"link","label":"FileUploadField","href":"/react-component-library-docs/docs/form-fields/file-upload-field","docId":"form-fields/file-upload-field","unlisted":false},{"type":"link","label":"TextAreaField","href":"/react-component-library-docs/docs/form-fields/textarea-field","docId":"form-fields/textarea-field","unlisted":false}],"href":"/react-component-library-docs/docs/category/form-fields"},{"type":"category","label":"Data Display","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Table","href":"/react-component-library-docs/docs/data-display/table","docId":"data-display/table","unlisted":false},{"type":"link","label":"Tabs","href":"/react-component-library-docs/docs/data-display/tabs","docId":"data-display/tabs","unlisted":false},{"type":"link","label":"Accordion","href":"/react-component-library-docs/docs/data-display/accordion","docId":"data-display/accordion","unlisted":false},{"type":"link","label":"Tooltip","href":"/react-component-library-docs/docs/data-display/tooltip","docId":"data-display/tooltip","unlisted":false},{"type":"link","label":"KeyValueData","href":"/react-component-library-docs/docs/data-display/key-value-data","docId":"data-display/key-value-data","unlisted":false}],"href":"/react-component-library-docs/docs/category/data-display"},{"type":"category","label":"Feedback","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Alert","href":"/react-component-library-docs/docs/feedback/alert","docId":"feedback/alert","unlisted":false},{"type":"link","label":"Toast","href":"/react-component-library-docs/docs/feedback/toast","docId":"feedback/toast","unlisted":false},{"type":"link","label":"Skeleton","href":"/react-component-library-docs/docs/feedback/skeleton","docId":"feedback/skeleton","unlisted":false},{"type":"link","label":"Spinner","href":"/react-component-library-docs/docs/feedback/spinner","docId":"feedback/spinner","unlisted":false},{"type":"link","label":"EmptyState","href":"/react-component-library-docs/docs/feedback/empty-state","docId":"feedback/empty-state","unlisted":false}],"href":"/react-component-library-docs/docs/category/feedback"},{"type":"category","label":"Overlays","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Modal","href":"/react-component-library-docs/docs/overlays/modal","docId":"overlays/modal","unlisted":false}],"href":"/react-component-library-docs/docs/category/overlays"},{"type":"category","label":"Layout","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Box","href":"/react-component-library-docs/docs/layout/box","docId":"layout/box","unlisted":false},{"type":"link","label":"Card","href":"/react-component-library-docs/docs/layout/card","docId":"layout/card","unlisted":false},{"type":"link","label":"DashboardLayout","href":"/react-component-library-docs/docs/layout/dashboard-layout","docId":"layout/dashboard-layout","unlisted":false},{"type":"link","label":"PlainLayout","href":"/react-component-library-docs/docs/layout/plain-layout","docId":"layout/plain-layout","unlisted":false}],"href":"/react-component-library-docs/docs/category/layout"},{"type":"category","label":"Icons","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"SvgIcon","href":"/react-component-library-docs/docs/icons/svg-icon","docId":"icons/svg-icon","unlisted":false}],"href":"/react-component-library-docs/docs/category/icons"}]},"docs":{"buttons/button":{"id":"buttons/button","title":"Button","description":"The Button component provides a flexible and accessible way to create styled buttons with support for variants, sizes, icons, full-width layout, and custom colors. Built using Tailwind CSS and designed to be reused across your UI.","sidebar":"tutorialSidebar"},"buttons/icon-button":{"id":"buttons/icon-button","title":"Icon Button","description":"The IconButton component renders a button with only an icon. It\'s useful for icon-only interactions like toolbars, toggles, and quick actions. Fully accessible with required aria-label support and customizable via size, color, and disabled state.","sidebar":"tutorialSidebar"},"data-display/accordion":{"id":"data-display/accordion","title":"Accordion","description":"A collapsible accordion component to display expandable/collapsible content. It allows you to create a list of accordion items that can be toggled open and closed.","sidebar":"tutorialSidebar"},"data-display/key-value-data":{"id":"data-display/key-value-data","title":"KeyValueData","description":"A flexible, responsive component to display key-value pairs in a grid layout. Useful for showing structured metadata or object details in dashboards or information panels.","sidebar":"tutorialSidebar"},"data-display/table":{"id":"data-display/table","title":"Table","description":"A responsive, sortable, and paginated table component designed to display tabular data with features like sorting, pagination, custom row rendering, and error handling. Perfect for dynamic data tables in React.","sidebar":"tutorialSidebar"},"data-display/tabs":{"id":"data-display/tabs","title":"Tabs","description":"A flexible, customizable tab component that supports both horizontal and vertical tab layouts. It allows for easy creation of tabbed interfaces where users can switch between different sections of content.","sidebar":"tutorialSidebar"},"data-display/tooltip":{"id":"data-display/tooltip","title":"Tooltip","description":"A lightweight and customizable tooltip component that displays a message when the user hovers, focuses, or taps on an element.","sidebar":"tutorialSidebar"},"feedback/alert":{"id":"feedback/alert","title":"Alert","description":"A stylized alert box for displaying important messages to users. Supports icons, dismissibility, and multiple alert types like info, success, error, and warning.","sidebar":"tutorialSidebar"},"feedback/empty-state":{"id":"feedback/empty-state","title":"EmptyState","description":"The EmptyState component is used to inform users when there is no data to display. It supports customizable icons, titles, and descriptions to better match different use cases.","sidebar":"tutorialSidebar"},"feedback/skeleton":{"id":"feedback/skeleton","title":"Skeleton","description":"A lightweight utility component for creating animated loading placeholders. Perfect for showing content loading states in lists, cards, text, avatars, etc.","sidebar":"tutorialSidebar"},"feedback/spinner":{"id":"feedback/spinner","title":"Spinner","description":"A simple animated loading spinner using Tailwind CSS. Ideal for indicating ongoing background processes like data fetching or form submission.","sidebar":"tutorialSidebar"},"feedback/toast":{"id":"feedback/toast","title":"Toast","description":"A lightweight toast notification component that shows transient messages. Supports various types, automatic dismissal, positioning, and custom icons.","sidebar":"tutorialSidebar"},"form-fields/checkbox-field":{"id":"form-fields/checkbox-field","title":"CheckboxField","description":"A styled and accessible checkbox input component built with Tailwind CSS, integrated with react-hook-form. Allows full customization through class overrides and displays validation errors.","sidebar":"tutorialSidebar"},"form-fields/checkbox-group-field":{"id":"form-fields/checkbox-group-field","title":"CheckboxGroupField","description":"A flexible group of checkboxes, designed for multiple selection fields and easily integrated with react-hook-form. Fully customizable with Tailwind utility overrides and displays inline error messaging.","sidebar":"tutorialSidebar"},"form-fields/date-field":{"id":"form-fields/date-field","title":"DateField","description":"A styled and form-integrated date picker input built with Tailwind CSS and react-hook-form. This field handles validation styling, error display, and supports extensive customization via class overrides.","sidebar":"tutorialSidebar"},"form-fields/file-upload-field":{"id":"form-fields/file-upload-field","title":"FileUploadField","description":"A styled file upload input designed for form integration with react-hook-form. It allows users to select files and displays validation errors as needed. The component uses Tailwind CSS for styling and is highly customizable.","sidebar":"tutorialSidebar"},"form-fields/input-field":{"id":"form-fields/input-field","title":"InputField","description":"A customizable input component integrated with react-hook-form that supports error states, labels, and Tailwind CSS class overrides.","sidebar":"tutorialSidebar"},"form-fields/radio-group-field":{"id":"form-fields/radio-group-field","title":"RadioGroupField","description":"A customizable and accessible radio button group for single selection, fully integrated with react-hook-form. Designed with Tailwind classes and flexibility in mind, it provides clear error feedback and styling overrides.","sidebar":"tutorialSidebar"},"form-fields/select-field":{"id":"form-fields/select-field","title":"SelectField","description":"A customizable and accessible select dropdown input integrated with react-hook-form. Supports label, error message, and Tailwind CSS class overrides.","sidebar":"tutorialSidebar"},"form-fields/textarea-field":{"id":"form-fields/textarea-field","title":"TextAreaField","description":"A styled textarea input for forms, designed to integrate seamlessly with react-hook-form. It provides built-in support for validation errors and customizable styling.","sidebar":"tutorialSidebar"},"icons/svg-icon":{"id":"icons/svg-icon","title":"SvgIcon","description":"A versatile icon component that renders SVG icons either as inline SVGs or by rendering the provided SVG markup. This component allows you to customize the size, color, and viewbox, and can handle both SVG paths and full SVG markup.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Welcome to the React Component Library! This library provides a set of reusable and customizable components for building modern React applications. It aims to offer a consistent and flexible user interface for your web applications, with fully customizable components that can easily integrate with Tailwind CSS and can be customized to meet your specific project needs.","sidebar":"tutorialSidebar"},"layout/box":{"id":"layout/box","title":"Box","description":"The Box component is a simple, flexible wrapper that lets you render any HTML element or custom component using the as prop. It\u2019s great for building composable layouts.","sidebar":"tutorialSidebar"},"layout/card":{"id":"layout/card","title":"Card","description":"A versatile container component that wraps content with padding, shadow, and optional hover effects. Great for grouping related information like dashboards, panels, or content sections.","sidebar":"tutorialSidebar"},"layout/dashboard-layout":{"id":"layout/dashboard-layout","title":"DashboardLayout","description":"A flexible layout component designed for dashboard-style UIs. It features a collapsible sidebar, mobile-friendly toggling, and main content area, providing an efficient structure for complex applications or admin dashboards.","sidebar":"tutorialSidebar"},"layout/plain-layout":{"id":"layout/plain-layout","title":"PlainLayout","description":"A simple layout component that provides a basic wrapper for the main content of the page. It ensures that the content takes up the full height of the screen with minimal styling. Ideal for pages that don\u2019t require a sidebar or advanced layout features.","sidebar":"tutorialSidebar"},"overlays/modal":{"id":"overlays/modal","title":"Modal","description":"The Modal component renders a responsive and accessible dialog overlay. It supports dynamic sizing, escape key handling, customizable content, and more.","sidebar":"tutorialSidebar"},"typography/divider":{"id":"typography/divider","title":"Divider","description":"The Divider component visually separates content. It supports both horizontal and vertical orientations and can include optional text centered within the line. Built using Tailwind CSS classes, it\'s highly customizable in color and thickness.","sidebar":"tutorialSidebar"},"typography/heading":{"id":"typography/heading","title":"Heading","description":"The Heading component renders styled heading elements (h1 through h6, or custom tags) with consistent font sizes, weights, and colors using Tailwind CSS utilities. Ideal for maintaining a unified typographic hierarchy in your design system.","sidebar":"tutorialSidebar"},"typography/text":{"id":"typography/text","title":"Text","description":"The Text component is a flexible wrapper around standard HTML text elements such as `, , or `. It allows you to apply consistent typography styles using Tailwind CSS classes, including font size, weight, color, and truncation.","sidebar":"tutorialSidebar"}}}}')}}]);